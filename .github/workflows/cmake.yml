name: CMake

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
    tags:
      - "v*"
  create:

env:
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Windows
            os: windows-2022
            preinstall: |
              choco install ninja --no-progress --yes
              # choco install llvm --version=19.1.0 --no-progress --yes
          - name: Linux
            os: ubuntu-24.04
            preinstall: |
              sudo apt-get update && sudo apt-get install ninja-build
              wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s 19
              sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-19 100
              sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-19 100
    steps:

    # These are required for the vcpkg binary caching
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install Toolchain
      run: ${{ matrix.config.preinstall }}

    - name: Test1
      run: ls | tee /dev/stderr
    - name: Test2
      run: ls ${{ github.workspace }} | tee /dev/stderr

    - name: Verify CMakePresets.json
      run: test -f ${{ github.workspace }}/CMakePresets.json || echo "CMakePresets.json is missing!"

    - name: Configure CMake
      run: cmake --preset Release

    - name: Build
      run: cmake --build ${{ github.workspace }}/build-release --parallel

    - name: Run Tests
      run: ctest --test-dir ${{ github.workspace }}/build-release

    - name: Upload Artifacts
      if: github.ref_type == 'tag'
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        if-no-files-found: ignore
        path: |
          ${{ github.workspace }}/build-release/glsld
          ${{ github.workspace }}/build-release/glsld.exe

  release:
    needs: build
    runs-on: ubuntu-24.04
    if: github.ref_type == 'tag'
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ${{ github.workspace }}/release-assets

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      # - uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_name: glsld-linux
      #     asset_path: ${{ github.workspace }}/release-assets/glsld
      #     asset_content_type: application/octet-stream

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: glsld-windows.exe
          asset_path: ${{ github.workspace }}/release-assets/glsld.exe
          asset_content_type: application/octet-stream
